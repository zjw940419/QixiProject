<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.njust.mapper.TrainDataMapper" >
  <resultMap id="BaseResultMap" type="com.njust.dataobject.TrainData" >
    <constructor >
      <idArg column="train_onlyid" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="temp_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="temp_average" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="gapmin_val" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="gap_min" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="lgap_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="lgap_min" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rgap_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rgap_min" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rgap_average" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="lgap_average" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="rslot_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rslot_min" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="lslot_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="lslot_min" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="rslot_average" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="lslot_average" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="train_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    train_onlyid, temp_max, temp_average, gapmin_val, gap_min, lgap_max, lgap_min, rgap_max,
    rgap_min, rgap_average, lgap_average, rslot_max, rslot_min, lslot_max, lslot_min,
    rslot_average, lslot_average, train_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.njust.dataobject.TrainDataExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from train_data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from train_data
    where train_onlyid = #{trainOnlyid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from train_data
    where train_onlyid = #{trainOnlyid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.njust.dataobject.TrainDataExample" >
    delete from train_data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.njust.dataobject.TrainData" >
    insert into train_data (train_onlyid, temp_max, temp_average,
    gapmin_val, gap_min, lgap_max,
    lgap_min, rgap_max, rgap_min,
    rgap_average, lgap_average, rslot_max,
    rslot_min, lslot_max, lslot_min,
    rslot_average, lslot_average, train_date
    )
    values (#{trainOnlyid,jdbcType=BIGINT}, #{tempMax,jdbcType=INTEGER}, #{tempAverage,jdbcType=DOUBLE},
    #{gapminVal,jdbcType=DOUBLE}, #{gapMin,jdbcType=INTEGER}, #{lgapMax,jdbcType=INTEGER},
    #{lgapMin,jdbcType=INTEGER}, #{rgapMax,jdbcType=INTEGER}, #{rgapMin,jdbcType=INTEGER},
    #{rgapAverage,jdbcType=DOUBLE}, #{lgapAverage,jdbcType=DOUBLE}, #{rslotMax,jdbcType=INTEGER},
    #{rslotMin,jdbcType=INTEGER}, #{lslotMax,jdbcType=INTEGER}, #{lslotMin,jdbcType=INTEGER},
    #{rslotAverage,jdbcType=DOUBLE}, #{lslotAverage,jdbcType=DOUBLE}, #{trainDate,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.njust.dataobject.TrainData" >
    insert into train_data
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="trainOnlyid != null" >
        train_onlyid,
      </if>
      <if test="tempMax != null" >
        temp_max,
      </if>
      <if test="tempAverage != null" >
        temp_average,
      </if>
      <if test="gapminVal != null" >
        gapmin_val,
      </if>
      <if test="gapMin != null" >
        gap_min,
      </if>
      <if test="lgapMax != null" >
        lgap_max,
      </if>
      <if test="lgapMin != null" >
        lgap_min,
      </if>
      <if test="rgapMax != null" >
        rgap_max,
      </if>
      <if test="rgapMin != null" >
        rgap_min,
      </if>
      <if test="rgapAverage != null" >
        rgap_average,
      </if>
      <if test="lgapAverage != null" >
        lgap_average,
      </if>
      <if test="rslotMax != null" >
        rslot_max,
      </if>
      <if test="rslotMin != null" >
        rslot_min,
      </if>
      <if test="lslotMax != null" >
        lslot_max,
      </if>
      <if test="lslotMin != null" >
        lslot_min,
      </if>
      <if test="rslotAverage != null" >
        rslot_average,
      </if>
      <if test="lslotAverage != null" >
        lslot_average,
      </if>
      <if test="trainDate != null" >
        train_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="trainOnlyid != null" >
        #{trainOnlyid,jdbcType=BIGINT},
      </if>
      <if test="tempMax != null" >
        #{tempMax,jdbcType=INTEGER},
      </if>
      <if test="tempAverage != null" >
        #{tempAverage,jdbcType=DOUBLE},
      </if>
      <if test="gapminVal != null" >
        #{gapminVal,jdbcType=DOUBLE},
      </if>
      <if test="gapMin != null" >
        #{gapMin,jdbcType=INTEGER},
      </if>
      <if test="lgapMax != null" >
        #{lgapMax,jdbcType=INTEGER},
      </if>
      <if test="lgapMin != null" >
        #{lgapMin,jdbcType=INTEGER},
      </if>
      <if test="rgapMax != null" >
        #{rgapMax,jdbcType=INTEGER},
      </if>
      <if test="rgapMin != null" >
        #{rgapMin,jdbcType=INTEGER},
      </if>
      <if test="rgapAverage != null" >
        #{rgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="lgapAverage != null" >
        #{lgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="rslotMax != null" >
        #{rslotMax,jdbcType=INTEGER},
      </if>
      <if test="rslotMin != null" >
        #{rslotMin,jdbcType=INTEGER},
      </if>
      <if test="lslotMax != null" >
        #{lslotMax,jdbcType=INTEGER},
      </if>
      <if test="lslotMin != null" >
        #{lslotMin,jdbcType=INTEGER},
      </if>
      <if test="rslotAverage != null" >
        #{rslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="lslotAverage != null" >
        #{lslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="trainDate != null" >
        #{trainDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.njust.dataobject.TrainDataExample" resultType="java.lang.Integer" >
    select count(*) from train_data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update train_data
    <set >
      <if test="record.trainOnlyid != null" >
        train_onlyid = #{record.trainOnlyid,jdbcType=BIGINT},
      </if>
      <if test="record.tempMax != null" >
        temp_max = #{record.tempMax,jdbcType=INTEGER},
      </if>
      <if test="record.tempAverage != null" >
        temp_average = #{record.tempAverage,jdbcType=DOUBLE},
      </if>
      <if test="record.gapminVal != null" >
        gapmin_val = #{record.gapminVal,jdbcType=DOUBLE},
      </if>
      <if test="record.gapMin != null" >
        gap_min = #{record.gapMin,jdbcType=INTEGER},
      </if>
      <if test="record.lgapMax != null" >
        lgap_max = #{record.lgapMax,jdbcType=INTEGER},
      </if>
      <if test="record.lgapMin != null" >
        lgap_min = #{record.lgapMin,jdbcType=INTEGER},
      </if>
      <if test="record.rgapMax != null" >
        rgap_max = #{record.rgapMax,jdbcType=INTEGER},
      </if>
      <if test="record.rgapMin != null" >
        rgap_min = #{record.rgapMin,jdbcType=INTEGER},
      </if>
      <if test="record.rgapAverage != null" >
        rgap_average = #{record.rgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="record.lgapAverage != null" >
        lgap_average = #{record.lgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="record.rslotMax != null" >
        rslot_max = #{record.rslotMax,jdbcType=INTEGER},
      </if>
      <if test="record.rslotMin != null" >
        rslot_min = #{record.rslotMin,jdbcType=INTEGER},
      </if>
      <if test="record.lslotMax != null" >
        lslot_max = #{record.lslotMax,jdbcType=INTEGER},
      </if>
      <if test="record.lslotMin != null" >
        lslot_min = #{record.lslotMin,jdbcType=INTEGER},
      </if>
      <if test="record.rslotAverage != null" >
        rslot_average = #{record.rslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="record.lslotAverage != null" >
        lslot_average = #{record.lslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="record.trainDate != null" >
        train_date = #{record.trainDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update train_data
    set train_onlyid = #{record.trainOnlyid,jdbcType=BIGINT},
    temp_max = #{record.tempMax,jdbcType=INTEGER},
    temp_average = #{record.tempAverage,jdbcType=DOUBLE},
    gapmin_val = #{record.gapminVal,jdbcType=DOUBLE},
    gap_min = #{record.gapMin,jdbcType=INTEGER},
    lgap_max = #{record.lgapMax,jdbcType=INTEGER},
    lgap_min = #{record.lgapMin,jdbcType=INTEGER},
    rgap_max = #{record.rgapMax,jdbcType=INTEGER},
    rgap_min = #{record.rgapMin,jdbcType=INTEGER},
    rgap_average = #{record.rgapAverage,jdbcType=DOUBLE},
    lgap_average = #{record.lgapAverage,jdbcType=DOUBLE},
    rslot_max = #{record.rslotMax,jdbcType=INTEGER},
    rslot_min = #{record.rslotMin,jdbcType=INTEGER},
    lslot_max = #{record.lslotMax,jdbcType=INTEGER},
    lslot_min = #{record.lslotMin,jdbcType=INTEGER},
    rslot_average = #{record.rslotAverage,jdbcType=DOUBLE},
    lslot_average = #{record.lslotAverage,jdbcType=DOUBLE},
    train_date = #{record.trainDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.njust.dataobject.TrainData" >
    update train_data
    <set >
      <if test="tempMax != null" >
        temp_max = #{tempMax,jdbcType=INTEGER},
      </if>
      <if test="tempAverage != null" >
        temp_average = #{tempAverage,jdbcType=DOUBLE},
      </if>
      <if test="gapminVal != null" >
        gapmin_val = #{gapminVal,jdbcType=DOUBLE},
      </if>
      <if test="gapMin != null" >
        gap_min = #{gapMin,jdbcType=INTEGER},
      </if>
      <if test="lgapMax != null" >
        lgap_max = #{lgapMax,jdbcType=INTEGER},
      </if>
      <if test="lgapMin != null" >
        lgap_min = #{lgapMin,jdbcType=INTEGER},
      </if>
      <if test="rgapMax != null" >
        rgap_max = #{rgapMax,jdbcType=INTEGER},
      </if>
      <if test="rgapMin != null" >
        rgap_min = #{rgapMin,jdbcType=INTEGER},
      </if>
      <if test="rgapAverage != null" >
        rgap_average = #{rgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="lgapAverage != null" >
        lgap_average = #{lgapAverage,jdbcType=DOUBLE},
      </if>
      <if test="rslotMax != null" >
        rslot_max = #{rslotMax,jdbcType=INTEGER},
      </if>
      <if test="rslotMin != null" >
        rslot_min = #{rslotMin,jdbcType=INTEGER},
      </if>
      <if test="lslotMax != null" >
        lslot_max = #{lslotMax,jdbcType=INTEGER},
      </if>
      <if test="lslotMin != null" >
        lslot_min = #{lslotMin,jdbcType=INTEGER},
      </if>
      <if test="rslotAverage != null" >
        rslot_average = #{rslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="lslotAverage != null" >
        lslot_average = #{lslotAverage,jdbcType=DOUBLE},
      </if>
      <if test="trainDate != null" >
        train_date = #{trainDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where train_onlyid = #{trainOnlyid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.njust.dataobject.TrainData" >
    update train_data
    set temp_max = #{tempMax,jdbcType=INTEGER},
    temp_average = #{tempAverage,jdbcType=DOUBLE},
    gapmin_val = #{gapminVal,jdbcType=DOUBLE},
    gap_min = #{gapMin,jdbcType=INTEGER},
    lgap_max = #{lgapMax,jdbcType=INTEGER},
    lgap_min = #{lgapMin,jdbcType=INTEGER},
    rgap_max = #{rgapMax,jdbcType=INTEGER},
    rgap_min = #{rgapMin,jdbcType=INTEGER},
    rgap_average = #{rgapAverage,jdbcType=DOUBLE},
    lgap_average = #{lgapAverage,jdbcType=DOUBLE},
    rslot_max = #{rslotMax,jdbcType=INTEGER},
    rslot_min = #{rslotMin,jdbcType=INTEGER},
    lslot_max = #{lslotMax,jdbcType=INTEGER},
    lslot_min = #{lslotMin,jdbcType=INTEGER},
    rslot_average = #{rslotAverage,jdbcType=DOUBLE},
    lslot_average = #{lslotAverage,jdbcType=DOUBLE},
    train_date = #{trainDate,jdbcType=TIMESTAMP}
    where train_onlyid = #{trainOnlyid,jdbcType=BIGINT}
  </update>

  <select id="findByTrainDateBetween" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from train_data
    where train_date BETWEEN #{pre} and #{after}
  </select>
</mapper>