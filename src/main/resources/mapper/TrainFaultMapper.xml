<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.njust.mapper.TrainFaultMapper" >
  <resultMap id="BaseResultMap" type="com.njust.dataobject.TrainFault" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="train_onlyid" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="fault_type" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="train_date" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, train_onlyid, fault_type, train_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.njust.dataobject.TrainFaultExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from train_fault
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from train_fault
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from train_fault
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.njust.dataobject.TrainFaultExample" >
    delete from train_fault
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.njust.dataobject.TrainFault" >
    insert into train_fault (id, train_onlyid, fault_type,
    train_date)
    values (#{id,jdbcType=BIGINT}, #{trainOnlyid,jdbcType=BIGINT}, #{faultType,jdbcType=INTEGER},
    #{trainDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.njust.dataobject.TrainFault" >
    insert into train_fault
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="trainOnlyid != null" >
        train_onlyid,
      </if>
      <if test="faultType != null" >
        fault_type,
      </if>
      <if test="trainDate != null" >
        train_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="trainOnlyid != null" >
        #{trainOnlyid,jdbcType=BIGINT},
      </if>
      <if test="faultType != null" >
        #{faultType,jdbcType=INTEGER},
      </if>
      <if test="trainDate != null" >
        #{trainDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.njust.dataobject.TrainFaultExample" resultType="java.lang.Integer" >
    select count(*) from train_fault
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update train_fault
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.trainOnlyid != null" >
        train_onlyid = #{record.trainOnlyid,jdbcType=BIGINT},
      </if>
      <if test="record.faultType != null" >
        fault_type = #{record.faultType,jdbcType=INTEGER},
      </if>
      <if test="record.trainDate != null" >
        train_date = #{record.trainDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update train_fault
    set id = #{record.id,jdbcType=BIGINT},
    train_onlyid = #{record.trainOnlyid,jdbcType=BIGINT},
    fault_type = #{record.faultType,jdbcType=INTEGER},
    train_date = #{record.trainDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.njust.dataobject.TrainFault" >
    update train_fault
    <set >
      <if test="trainOnlyid != null" >
        train_onlyid = #{trainOnlyid,jdbcType=BIGINT},
      </if>
      <if test="faultType != null" >
        fault_type = #{faultType,jdbcType=INTEGER},
      </if>
      <if test="trainDate != null" >
        train_date = #{trainDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.njust.dataobject.TrainFault" >
    update train_fault
    set train_onlyid = #{trainOnlyid,jdbcType=BIGINT},
    fault_type = #{faultType,jdbcType=INTEGER},
    train_date = #{trainDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="findByTrainOnlyid" resultType="integer" parameterType="Long">
    select
    <include refid="Base_Column_List" />
    from train_fault where train_onlyid=#{trainOnlyid}
  </select>
</mapper>